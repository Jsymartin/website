@page "/Reaction"
@rendermode InteractiveServer
<style>
    .game-container {
        position: relative;
        width: 100%;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    .circle {
        width: 400px;
        height: 400px;
        border-radius: 50%;
        cursor: pointer;
        transition: background-color 0.3s ease-in-out;
    }

    .red {
        background-color: red;
    }

    .green {
        background-color: green;
    }

    .info {
        margin-top: 20px;
        font-size: 1.5rem;
    }

    .button {
        margin-top: 20px;
        padding: 10px 20px;
        font-size: 1rem;
        cursor: pointer;
    }
</style>

<div class="game-container">
    <div class="circle @ColorClass" @onclick="HandleClick"></div>
    <div class="info">@Message</div>
    @if (ReactionTime > 0)
    {
        <div class="info">Your reaction time: <strong>@ReactionTime</strong> ms</div>
        <button class="button" @onclick="ResetGame">Try Again</button>
    }
</div>

@code {
    private string ColorClass = "red";
    private string Message = "Wait for green, then click!";
    private bool IsWaiting = false;
    private bool CanClick = false;
    private long StartTime;
    private long ReactionTime;

    private async Task HandleClick()
    {
        if (IsWaiting)
        {
            // Clicked too early
            Message = "Too soon! Wait for green.";
            ColorClass = "red";
            CanClick = false;
            IsWaiting = false;
            ReactionTime = 0;
        }
        else if (CanClick)
        {
            var now = DateTimeOffset.Now.ToUnixTimeMilliseconds();
            ReactionTime = now - StartTime;
            Message = "Nice!";
            CanClick = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await StartGame();
    }

    private async Task StartGame()
    {
        ColorClass = "red";
        Message = "Wait for green, then click!";
        ReactionTime = 0;
        IsWaiting = true;

        // Wait for a random time between 2-5 seconds
        var delay = new Random().Next(2000, 5000);
        await Task.Delay(delay);

        ColorClass = "green";
        IsWaiting = false;
        CanClick = true;
        StartTime = DateTimeOffset.Now.ToUnixTimeMilliseconds();
    }

    private async Task ResetGame()
    {
        await StartGame();
    }
}
