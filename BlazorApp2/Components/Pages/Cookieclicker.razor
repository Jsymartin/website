@page "/cookieclicker"
@rendermode InteractiveServer
@implements IDisposable

<style>
    .container {
        text-align: center;
        margin: auto;
        font-family: sans-serif;
        max-width: 900px;
    }

    .cookie {
        width: 150px;
        height: 150px;
        background: radial-gradient(circle at center, #d2691e, #8b4513);
        border-radius: 50%;
        box-shadow: inset -10px -10px 15px #a0522d, inset 10px 10px 15px #deb887;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 2rem;
        margin: 20px auto;
        transition: transform 0.1s;
    }

        .cookie:active {
            transform: scale(0.95);
        }

    .controls {
        display: flex;
        justify-content: center;
        gap: 30px;
        margin-top: 10px;
        flex-wrap: wrap;
        align-items: center;
    }

    .control-group {
        display: flex;
        flex-direction: column;
        align-items: center;
        font-size: 0.9rem;
    }

        .control-group label {
            margin-bottom: 4px;
        }

    .upgrades {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 15px;
        margin-top: 20px;
    }

    .upgrade {
        border: 1px solid #ccc;
        padding: 10px;
        width: 230px;
        border-radius: 8px;
        background-color: #f9f9f9;
        transition: background-color 0.2s ease, opacity 0.3s ease;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

        .upgrade.bought {
            opacity: 0.6;
            background-color: #e0e0e0;
            pointer-events: none;
        }

        .upgrade h4 {
            margin: 0 0 6px 0;
        }

        .upgrade button {
            margin-top: 10px;
            padding: 6px 12px;
            font-size: 1rem;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            background-color: #d2691e;
            color: white;
            transition: background-color 0.2s ease;
        }

            .upgrade button:disabled {
                background-color: #999;
                cursor: not-allowed;
            }

            .upgrade button:not(:disabled):hover {
                background-color: #b35414;
            }
</style>

<div class="container">
    <div class="cookie" @onclick="ClickCookie">🍪</div>

    <h2>Cookies: @Cookies</h2>
    <h3>Cookies per click: @CookiesPerClick</h3>
    <h3>Auto-clickers: @AutoClickers</h3>
    <h3>Multiplier: x@Multiplier</h3>

    <div class="controls">
        <div class="control-group">
            <label for="speedRange">Game Speed: @GameSpeed x</label>
            <input type="range" id="speedRange" min="1" max="10" step="1" @bind="GameSpeed" />
        </div>

        <div class="control-group">
            <label for="upgradeFilter">Filter Upgrades</label>
            <select id="upgradeFilter" @bind="SelectedFilter">
                <option value="All">All</option>
                @foreach (var type in Enum.GetValues<UpgradeType>())
                {
                    <option value="@type.ToString()">@type.ToString()</option>
                }
            </select>
        </div>
    </div>

    <div class="upgrades">
        @foreach (var upgrade in FilteredUpgrades)
        {
            <div class="upgrade @(upgrade.Bought ? "bought" : "")">
                <h4>@upgrade.Name</h4>
                <p>@upgrade.Description</p>
                <p>Cost: @upgrade.Cost</p>
                <button @onclick="() => BuyUpgrade(upgrade)" disabled="@(Cookies < upgrade.Cost || upgrade.Bought)">
                    @(upgrade.Bought ? "Bought" : "Buy")
                </button>
            </div>
        }
    </div>
</div>

@code {
    private int Cookies = 0;
    private int ClickPower = 1;
    private int AutoClickers = 0;
    private int Multiplier = 1;

    private List<Upgrade> Upgrades = new();
    private System.Timers.Timer? timer;

    private int _gameSpeed = 1;
    private string SelectedFilter { get; set; } = "All";

    public int GameSpeed
    {
        get => _gameSpeed;
        set
        {
            if (value < 1) _gameSpeed = 1;
            else if (value > 10) _gameSpeed = 10;
            else _gameSpeed = value;
            RestartTimer();
        }
    }

    public enum UpgradeType
    {
        ClickPower,
        AutoClicker,
        Multiplier,
        Decoration,
        Useless,
        SuperMultiplier
    }

    public class Upgrade
    {
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public int Cost { get; set; }
        public bool Bought { get; set; } = false;
        public UpgradeType Type { get; set; }
        public int Amount { get; set; }
    }

    protected override void OnInitialized()
    {
        GenerateUpgrades();
        StartTimer();
    }

    private void StartTimer()
    {
        timer = new System.Timers.Timer(1000 / GameSpeed);
        timer.Elapsed += async (s, e) =>
        {
            Cookies += AutoClickers;
            await InvokeAsync(StateHasChanged);
        };
        timer.Start();
    }

    private void RestartTimer()
    {
        if (timer is not null)
        {
            timer.Stop();
            timer.Dispose();
        }
        StartTimer();
    }

    private void ClickCookie()
    {
        Cookies += CookiesPerClick;
    }

    private int DecorationBonus => Upgrades
        .Where(u => u.Type == UpgradeType.Decoration && u.Bought)
        .Sum(u => u.Amount);

    public int CookiesPerClick => (ClickPower + DecorationBonus) * Multiplier;

    private void BuyUpgrade(Upgrade upgrade)
    {
        if (Cookies < upgrade.Cost || upgrade.Bought)
            return;

        Cookies -= upgrade.Cost;
        upgrade.Bought = true;

        switch (upgrade.Type)
        {
            case UpgradeType.ClickPower:
                ClickPower += upgrade.Amount;
                break;
            case UpgradeType.AutoClicker:
                AutoClickers += upgrade.Amount;
                break;
            case UpgradeType.Multiplier:
                Multiplier += upgrade.Amount;
                break;
            case UpgradeType.SuperMultiplier:
                Multiplier *= upgrade.Amount;
                break;
            case UpgradeType.Decoration:
                // Decoration bonus accounted for in CookiesPerClick
                break;
            case UpgradeType.Useless:
                // No effect
                break;
        }
    }

    private IEnumerable<Upgrade> FilteredUpgrades
    {
        get
        {
            if (SelectedFilter == "All")
                return Upgrades.OrderBy(u => u.Type).ThenBy(u => u.Cost);
            else if (Enum.TryParse<UpgradeType>(SelectedFilter, out var type))
                return Upgrades.Where(u => u.Type == type).OrderBy(u => u.Cost);
            else
                return Upgrades.OrderBy(u => u.Type).ThenBy(u => u.Cost);
        }
    }

    private void GenerateUpgrades()
    {
        Upgrades.Clear();

        for (int i = 1; i <= 90; i++)
        {
            var type = (UpgradeType)(i % 3); // Cycle ClickPower, AutoClicker, Multiplier
            Upgrades.Add(new Upgrade
                {
                    Name = $"Upgrade {i}",
                    Description = type switch
                    {
                        UpgradeType.ClickPower => $"+{i} to click power",
                        UpgradeType.AutoClicker => $"+{i} auto-clickers",
                        UpgradeType.Multiplier => $"+{i}x multiplier",
                        _ => "???"
                    },
                    Type = type,
                    Amount = i,
                    Cost = 10 * i * i
                });
        }

        for (int i = 91; i <= 95; i++)
        {
            Upgrades.Add(new Upgrade
                {
                    Name = $"Golden Frame {i - 90}",
                    Description = "Decorative upgrade (+1 click power bonus)",
                    Type = UpgradeType.Decoration,
                    Amount = 1,
                    Cost = 2000 * i
                });
        }

        for (int i = 96; i <= 98; i++)
        {
            Upgrades.Add(new Upgrade
                {
                    Name = $"Mystery Upgrade {i - 95}",
                    Description = "Does nothing. Really.",
                    Type = UpgradeType.Useless,
                    Amount = 0,
                    Cost = 9999 * i
                });
        }

        Upgrades.Add(new Upgrade
            {
                Name = "1 Million Multiplier",
                Description = "Grants x1,000,000 multiplier. Game over?",
                Type = UpgradeType.SuperMultiplier,
                Amount = 1_000_000,
                Cost = 100_000_000
            });
    }

    public void Dispose()
    {
        timer?.Stop();
        timer?.Dispose();
    }
}
